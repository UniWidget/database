//Build with build.py(author:Aiskikan) 2023-08-15 14:09:05
//build.py version:0.1.0 
//widget_head files: widget_head.js 
//widget_export files: widget_export.js 
//widget_build files: ['src\\0-crypto\\0-hash.js', 'src\\0-crypto\\1-hmac_hash.js', 'src\\0-crypto\\2-cjs_encryption.js', 'src\\0-crypto\\3-rsa.js', 'src\\1-js\\0-eval.js', 'src\\2-axios\\0-axios_head.js', 'src\\2-axios\\1-axios.js', 'src\\3-random_tools\\0-uuid.js', 'src\\3-random_tools\\1-number.js', 'src\\4-coco_ui\\0-del_web_bin.js'] 
//build output file: build/coco_utils.js 

//file:widget_head.js

var document = this.document;
var window = this.window;
var navigator = this.navigator;
var history = this.history;
//const axios = require('axios');
const utils = require('utils');
//const vika = require('@vikadata/vika').default;
const qrcode = require('qrcode');
const lodash = require('lodash');
var CryptoJS = require("crypto-js");
const types = {
    isInvisibleWidget: true,
    type: "COCO_UTILS_WIDGET",
    icon: "https://creation.codemao.cn/716/appcraft/IMAGE_8npm5YDN-_1691307672150.svg",
    title: "Coco实用工具",
    version: "0.0.1",
    isGlobalWidget: true,
    properties: [],
    methods: [],
    events: [],
};

class Widget extends InvisibleWidget {
    constructor(props) {
        super(props);
    }

}


//file:src\0-crypto\0-hash.js

types['methods'].push({
    key: 'crypto_hash',
    label: '散列',
    params: [
        {
            key: 'algo',
            label: '',
            valueType: 'string',
            defaultValue: 'MD5',
            dropdown: [
                { label: 'MD5', value: 'MD5' },
                { label: 'SHA1', value: 'SHA1' },
                { label: 'SHA224', value: 'SHA224' },
                { label: 'SHA256', value: 'SHA256' },
                { label: 'SHA384', value: 'SHA384' },
                { label: 'SHA512', value: 'SHA512' },
                { label: 'SHA3', value: 'SHA3' },
                { label: 'RIPEMD160', value: 'RIPEMD160' },
            ]
        },
        {

            key: 'data',
            label: '数据',
            valueType: 'string',
            defaultValue: '数据'
        }
    ],
    valueType: 'string',
    blockOptions: {
        line: "哈希算法"
    }
})
Widget.prototype.crypto_hash = function (algo, data) {
    return CryptoJS[algo](data).toString();
}

//file:src\0-crypto\1-hmac_hash.js

types['methods'].push({
    key: 'crypto_hmac_hash',
    label: '散列 HMAC_',
    params: [
        {
            key: 'algo',
            label: '',
            valueType: 'string',
            defaultValue: 'HmacMD5',
            dropdown: [
                { label: 'MD5', value: 'HmacMD5' },
                { label: 'SHA1', value: 'HmacSHA1' },
                { label: 'SHA224', value: 'HmacSHA224' },
                { label: 'SHA256', value: 'HmacSHA256' },
                { label: 'SHA384', value: 'HmacSHA384' },
                { label: 'SHA512', value: 'HmacSHA512' },
                { label: 'SHA3', value: 'HmacSHA3' },
                { label: 'RIPEMD160', value: 'HmacRIPEMD160' },
            ]
        },
        {

            key: 'data',
            label: '数据',
            valueType: 'string',
            defaultValue: '数据'
        },
        {

            key: 'key',
            label: '密钥',
            valueType: 'string',
            defaultValue: '密钥'
        }
    ],
    valueType: 'string'
})
Widget.prototype.crypto_hmac_hash = function (algo, data, key) {
    return CryptoJS[algo](data, key).toString();
}

//file:src\0-crypto\2-cjs_encryption.js

types['methods'].push({
    key: 'cjs_encryption',
    label: '加密算法',
    params: [
        {
            key: 'algo',
            label: '',
            valueType: 'string',
            defaultValue: 'AES',
            dropdown: [
                { label: 'AES', value: 'AES' },
                { label: 'DES', value: 'DES' },
                { label: 'TripleDES', value: 'TripleDES' },
                { label: 'Rabbit', value: 'Rabbit' },
                { label: 'RC4', value: 'RC4' },
            ]
        },
        {
            key: 'type',
            label: '',
            valueType: 'string',
            defaultValue: 'encrypt',
            dropdown: [
                { label: '加密', value: 'encrypt' },
                { label: '解密', value: 'decrypt' },
            ]
        },
        {

            key: 'data',
            label: '数据',
            valueType: 'string',
            defaultValue: '数据'
        },
        {

            key: 'key',
            label: '密钥',
            valueType: 'string',
            defaultValue: '密钥'
        }
    ],
    valueType: 'string',
    blockOptions: {
        line: "加密算法"
    }
})
Widget.prototype.cjs_encryption = function (algo, type, data, key) {
    var o = CryptoJS[algo][type](data, key);
    if (type == 'decrypt') return o.toString(CryptoJS.enc.Utf8);
    else return o.toString();
}

//file:src\0-crypto\3-rsa.js

//Author Aiskikan
var crypto_rsa_jsencrypt_unicode_cracking_code = ""
var window = this.window;
window.eval(atob(crypto_rsa_jsencrypt_unicode_cracking_code));

types['methods'].push({
    key: 'crypto_rsa_tip',
    label: '必读Tip：本控件使用了修改版的jsencrypt，支持Unicode，和超长字符串，但因为js性能限制，建议不要使用太长的私钥和字符串',
    params: [],
    blockOptions: {
        line: "RSA算法"
    }
})
Widget.prototype.crypto_rsa_tip = function () {

}

types['methods'].push({
    key: 'crypto_rsa_genPrivateKey',
    label: '生成私钥',
    params: [
        {
            key: 'key_len',
            label: '私钥长度(必须为1024，2048，3072，4096等值)',
            valueType: 'number',
            dropdown: [
                { label: '1024', value: 1024, },

                { label: '2048', value: 2048, },

                { label: '3072', value: 3072, },

                { label: '4096', value: 4096, },
            ],
        },

    ],
    valueType: 'string',

})
Widget.prototype.crypto_rsa_genPrivateKey = function (key_len,) {
    var jse = new JSEncrypt();
    jse.default_key_size = key_len;
    return jse.getPrivateKey();
}

types['methods'].push({
    key: 'crypto_rsa_genPublicKey',
    label: '生成公钥',
    params: [
        {
            key: 'private_key',
            label: '私钥',
            valueType: 'multilineString',
            checkType: 'string',
            defaultValue: '-----BEGIN RSA PRIVATE KEY-----\n...\n-----END RSA PRIVATE KEY-----'
        },

    ],
    valueType: 'string',

})
Widget.prototype.crypto_rsa_genPublicKey = function (private_key,) {
    var jse = new JSEncrypt();
    jse.setPrivateKey(private_key);
    return jse.getPublicKey();
}

types['methods'].push({
    key: 'crypto_rsa_rsa_encryptUnicodeLong',
    label: 'RSA加密算法-加密（调用自制PKCS1Padding）',
    params: [
        {
            key: 'text',
            label: '文本',
            valueType: 'multilineString',
            checkType: 'string',
            defaultValue: '你好Coco！'
        },
        {
            key: 'public_key',
            label: '公钥',
            valueType: 'multilineString',
            checkType: 'string',
            defaultValue: '-----BEGIN PUBLIC KEY-----\n...\n-----END PUBLIC KEY-----'
        },

    ],
    valueType: 'string',

})
Widget.prototype.crypto_rsa_rsa_encryptUnicodeLong = function (text, public_key) {
    var jse = new JSEncrypt();
    jse.setPublicKey(public_key);
    return jse.encryptUnicodeLong(text);
}

types['methods'].push({
    key: 'crypto_rsa_rsa_decryptUnicodeLong',
    label: 'RSA加密算法-解密（调用自制PKCS1Padding）',
    params: [
        {
            key: 'text',
            label: '密文',
            valueType: 'multilineString',
            checkType: 'string',
            defaultValue: 'DxAFRJT7q3E4LPciUAB5O...'
        },
        {
            key: 'private_key',
            label: '私钥',
            valueType: 'multilineString',
            checkType: 'string',
            defaultValue: '-----BEGIN RSA PRIVATE KEY-----\n...\n-----END RSA PRIVATE KEY-----'
        },

    ],
    valueType: 'string',

})
Widget.prototype.crypto_rsa_rsa_decryptUnicodeLong = function (text, private_key) {
    var jse = new JSEncrypt();
    jse.setPrivateKey(private_key);
    return jse.decryptUnicodeLong(text);
}

types['methods'].push({
    key: 'crypto_rsa_rsa_sign',
    label: 'RSA数字签名-签名',
    params: [
        {
            key: 'text',
            label: '文本',
            valueType: 'multilineString',
            checkType: 'string',
            defaultValue: '我爱Coco！'
        },
        {
            key: 'private_key',
            label: '私钥',
            valueType: 'multilineString',
            checkType: 'string',
            defaultValue: '-----BEGIN RSA PRIVATE KEY-----\n...\n-----END RSA PRIVATE KEY-----'
        },
        {
            key: 'algo',
            label: 'Hash算法',
            valueType: 'string',
            defaultValue: 'SHA256',
            dropdown: [
                { label: 'MD5', value: 'MD5' },
                { label: 'SHA1', value: 'SHA1' },
                { label: 'SHA224', value: 'SHA224' },
                { label: 'SHA256', value: 'SHA256' },
                { label: 'SHA384', value: 'SHA384' },
                { label: 'SHA512', value: 'SHA512' },
                { label: 'RIPEMD160', value: 'RIPEMD160' },
            ]
        },

    ],
    valueType: 'string',

})
Widget.prototype.crypto_rsa_rsa_sign = function (text, private_key, algo) {
    var jse = new JSEncrypt();
    jse.setPrivateKey(private_key);
    return jse.sign(text, CryptoJS[algo], algo.toLowerCase())
}

types['methods'].push({
    key: 'crypto_rsa_rsa_verify',
    label: 'RSA数字签名-验签',
    params: [
        {
            key: 'text',
            label: '文本',
            valueType: 'multilineString',
            checkType: 'string',
            defaultValue: '我爱Coco！'
        },
        {
            key: 'sign',
            label: '签名',
            valueType: 'multilineString',
            checkType: 'string',
            defaultValue: 'QKuQW6pNtBAUJtdKDH...'
        },
        {
            key: 'public_key',
            label: '公钥',
            valueType: 'multilineString',
            checkType: 'string',
            defaultValue: '-----BEGIN PUBLIC KEY-----\n...\n-----END PUBLIC KEY-----'
        },
        {
            key: 'algo',
            label: 'Hash算法',
            valueType: 'string',
            defaultValue: 'SHA256',
            dropdown: [
                { label: 'MD5', value: 'MD5' },
                { label: 'SHA1', value: 'SHA1' },
                { label: 'SHA224', value: 'SHA224' },
                { label: 'SHA256', value: 'SHA256' },
                { label: 'SHA384', value: 'SHA384' },
                { label: 'SHA512', value: 'SHA512' },
                { label: 'RIPEMD160', value: 'RIPEMD160' },
            ]
        },

    ],
    valueType: 'boolean',

})
Widget.prototype.crypto_rsa_rsa_verify = function (text, sign, public_key, algo) {
    var jse = new JSEncrypt();
    jse.setPublicKey(public_key);
    return jse.verify(text, sign, CryptoJS[algo]);
}

//file:src\1-js\0-eval.js

/*高危建议删除*/
types['methods'].push({
    key: 'js_eval',
    label: 'JS函数（高危）_eval',
    params: [
        {
            key: 'code',
            label: '',
            valueType: 'string',
            defaultValue: 'console.log("Hello world!")',
        },],
    valueType: ['string', 'number', 'boolean', 'array', 'color', 'object',],
    blockOptions: {
        line: "js功能"
    }
})
Widget.prototype.js_eval = function (code,) {
    return window.eval(code);
}

//file:src\2-axios\0-axios_head.js

var axios_head_code_base64 = ""
window.eval(atob(axios_head_code_base64));



/*
    ban_bcmapi
*/
/*
const axios_head_CancelToken = axios.CancelToken;
const axios_head_source = axios_head_CancelToken.source();
axios.interceptors.request.use(function (config) {
    var fullurl = config.baseurl + config.url;
    var d = fullurl.split('/');
    if (d[2]) {
        d = d[2];
    } else {
        d = '';
    }
    if (d.toLowerCase().includes("api.codemao.cn")) {
        return Promise.reject("禁止访问");
    }
    return config
});*/

//file:src\2-axios\1-axios.js

types['methods'].push({
    key: 'axios',
    label: 'axios',
    params: [
        {
            key: 'id',
            label: '请求id',
            valueType: 'string',
            defaultValue: '建议使用随机字符',
        },
        {
            key: 'method',
            label: 'method',
            valueType: 'string',
            defaultValue: 'get',
        },
        {
            key: 'url',
            label: 'url',
            valueType: 'string',
            defaultValue: 'https://coco.codemao.cn/editor/',
        },
        {
            key: '（以下参数是字典，或JSON！） param',
            label: 'param',
            valueType: 'string',
            defaultValue: "{}",
        },
        {
            key: 'data',
            label: 'data(仅post/put/patch)',
            valueType: 'string',
            defaultValue: "{}",
        },
        {
            key: 'headers',
            label: 'headers',
            valueType: 'string',
            defaultValue: "{}",
        },
        {
            key: 'configs',
            label: 'configs',
            valueType: 'string',
            defaultValue: '{"withCredentials": false}',
        },
    ],
    blockOptions: {
        line: "无限制axios"
    }
});
types['events'].push({
    key: 'axios_then',
    label: 'axios_请求成功',
    params: [
        {
            key: 'id',
            label: '请求id',
            valueType: 'string',
        },
        {
            key: 'data',
            label: 'data',
            valueType: ['string', 'number', 'boolean', 'color', 'array', 'object'],
        },
        {
            key: 'status',
            label: 'status',
            valueType: 'number',
        },
        {
            key: 'headers',
            label: 'headers',
            valueType: 'object',
        },
        {
            key: 'config',
            label: 'config',
            valueType: 'object',
        },
    ],

});
types['events'].push({
    key: 'axios_catch',
    label: 'axios_请求失败',
    params: [
        {
            key: 'id',
            label: '请求id',
            valueType: 'string',
        },
        {
            key: 'error_json',
            label: '错误详情',
            valueType: 'object',
        }
    ],
});
Widget.prototype.axios = function (id, method, url, param, data, headers, configs) {
    var axios_config_weak = {
        method: method,
        url: url,
        data: JSON.parse(data),
        param: JSON.parse(param),
        headers: JSON.parse(headers),
    }
    var axios_config = Object.assign(axios_config_weak, JSON.parse(configs));
    console.log(axios_config);
    axios(axios_config)
        .then((response) => {
            this.emit("axios_then", id, response.data, response.status, response.headers, response.configs);
            return;
        })
        .catch((error) => {
            this.emit("axios_catch", id, error);
            return;
        });
}

//file:src\3-random_tools\0-uuid.js

types['methods'].push({
    key: 'random_tools_uuid',
    label: '随机UUID',
    params: [],
    valueType: 'string',
    blockOptions: {
        line: "随机工具"
    }
});
Widget.prototype.random_tools_uuid = function () {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = (Math.random() * 16) | 0,
            v = c == 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
}

//file:src\3-random_tools\1-number.js

types['methods'].push({
    key: 'random_tools_number',
    label: '随机小数',
    params: [
        {
            key: 'min',
            label: '最小值',
            valueType: 'number',
            defaultValue: 0,
        },
        {
            key: 'max',
            label: '最大值',
            valueType: 'number',
            defaultValue: 10,
        },
    ],
    valueType: 'number',
});
Widget.prototype.random_tools_number = function (min,max) {
    return Math.random() * (max - min) + min;
}

//file:src\4-coco_ui\0-del_web_bin.js

//疑似有伤害性？

types['methods'].push({
    key: 'coco_ui_del_ew',
    label: '删除emulator-wrapper',
    params: [],
    blockOptions: {
        line:"Coco网页端UI功能"
    }
})
Widget.prototype.coco_ui_del_ew = function () {
    coco_ui_del_dom_by_class_name("emulator-wrapper")
}

types['methods'].push({
    key: 'coco_ui_del_df',
    label: '删除deviceFrame',
    params: [],
})
Widget.prototype.coco_ui_del_df = function () {
    coco_ui_del_dom_by_class_name("styles_deviceFrame__")
}

types['methods'].push({
    key: 'coco_ui_del_aub',
    label: '删除appUrlBtn',
    params: [],
})

Widget.prototype.coco_ui_del_aub = function () {
    coco_ui_del_dom_by_class_name("styles_appUrlBtn__")
}

types['methods'].push({
    key: 'coco_ui_qp',
    label: '全屏（真全屏，不做适配，用于作品嵌套）',
    params: [],
})

Widget.prototype.coco_ui_qp = function () {
    var code = `
    (function () {
        document.getElementById("root").appendChild(document.getElementById("rootPlayer"));
        document.getElementById("webPlayer").remove();
    }());
    `
    window.eval(code);
    coco_ui_del_dom_by_class_name("styles_community__");

}
function coco_ui_del_dom_by_class_name(classname) {
    var code = `
    (function (q) {
        var clslst = document.querySelectorAll(q);
        if (clslst.length < 1) {
            console.error("coco_web_hook find 0 dom with " + q);
        } else {
            for (var i=0;i<clslst.length;i++) {
                console.log("coco_web_hook find " + q,clslst[i]);
                clslst[i].remove();
            }
        }
    }("[class*=${classname}]"));
    `
    window.eval(code);
}

//file:widget_export.js

exports.types = types;
exports.widget = Widget;

//Build end,good luck:)
